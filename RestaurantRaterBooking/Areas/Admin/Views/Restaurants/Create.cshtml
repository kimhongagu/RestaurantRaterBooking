@model RestaurantRaterBooking.Models.Restaurant

@{
	ViewData["Title"] = "Create";
	var tags = ViewData["Tags"] as List<Tag>;
	int totalTags = tags.Count;
	int baseTagsPerColumn = totalTags / 4;
	int remainder = totalTags % 4;
	Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
<h1>Create</h1>

<h4>Restaurant</h4>
<hr />
<div class="row ml-2 mr-2">
	<div class="col-md-12">
		<form asp-action="Create" enctype="multipart/form-data" id="restaurantForm">
			<div asp-validation-summary="All" class="text-danger"></div>
			<div class="form-group">
				<label asp-for="Name" class="control-label"></label>
				<input asp-for="Name" class="form-control" />
				<span asp-validation-for="Name" class="text-danger"></span>
			</div>

			<div class="form-group">
				<label asp-for="Description" class="control-label"></label>
				<textarea asp-for="Description" class="form-control" id="txtDesciption"></textarea>
				<span asp-validation-for="Description" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="Address" class="control-label"></label>
				<input asp-for="Address" class="form-control" />
				<span asp-validation-for="Address" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="Phone" class="control-label"></label>
				<input asp-for="Phone" class="form-control" />
				<span asp-validation-for="Phone" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="Website" class="control-label"></label>
				<input asp-for="Website" class="form-control" />
				<span asp-validation-for="Website" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="Email" class="control-label"></label>
				<input asp-for="Email" class="form-control" />
				<span asp-validation-for="Email" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="Offer" class="control-label"></label>
				<input asp-for="Offer" class="form-control" />
				<span asp-validation-for="Offer" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="OpeningHour" class="control-label"></label>
				<input asp-for="OpeningHour" class="form-control" type="time" step="1800" />
				<span asp-validation-for="OpeningHour" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="ClosingHour" class="control-label"></label>
				<input asp-for="ClosingHour" class="form-control" type="time" step="1800" />
				<span asp-validation-for="ClosingHour" class="text-danger"></span>
			</div>

			<div class="form-group">
				<label asp-for="SuitableFor" class="control-label"></label>
				<input asp-for="SuitableFor" class="form-control" />
				<span asp-validation-for="SuitableFor" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="SpecialFeature" class="control-label"></label>
				<input asp-for="SpecialFeature" class="form-control" />
				<span asp-validation-for="SpecialFeature" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="Space" class="control-label"></label>
				<input asp-for="Space" class="form-control" />
				<span asp-validation-for="Space" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="ParkingSpace" class="control-label"></label>
				<input asp-for="ParkingSpace" class="form-control" />
				<span asp-validation-for="ParkingSpace" class="text-danger"></span>
			</div>

			<div class="row">
				<div class="col-4">
					<div class="form-group form-check">
						<label class="form-check-label">
							<input class="form-check-input" asp-for="ChildrenChair" /> @Html.DisplayNameFor(model => model.ChildrenChair)
						</label>
					</div>
				</div>
				<div class="col-4">
					<div class="form-group form-check">
						<label class="form-check-label">
							<input class="form-check-input" asp-for="Wifi" /> @Html.DisplayNameFor(model => model.Wifi)
						</label>
					</div>
				</div>
				<div class="col-4">
					<div class="form-group form-check">
						<label class="form-check-label">
							<input class="form-check-input" asp-for="AirConditioning" /> @Html.DisplayNameFor(model => model.AirConditioning)
						</label>
					</div>
				</div>
			</div>

			<div class="row">
				<div class="col-4">
					<div class="form-group form-check">
						<label class="form-check-label">
							<input class="form-check-input" asp-for="VisaMasterCard" /> @Html.DisplayNameFor(model => model.VisaMasterCard)
						</label>
					</div>
				</div>
				<div class="col-4">
					<div class="form-group form-check">
						<label class="form-check-label">
							<input class="form-check-input" asp-for="VATInvoice" /> @Html.DisplayNameFor(model => model.VATInvoice)
						</label>
					</div>
				</div>
				<div class="col-4">
					<div class="form-group form-check">
						<label class="form-check-label">
							<input class="form-check-input" asp-for="PrivateRoom" /> @Html.DisplayNameFor(model => model.PrivateRoom)
						</label>
					</div>
				</div>
			</div>

			<div class="row">
				<div class="col-4">
					<div class="form-group form-check">
						<label class="form-check-label">
							<input class="form-check-input" asp-for="OutdoorTable" /> @Html.DisplayNameFor(model => model.OutdoorTable)
						</label>
					</div>
				</div>
				<div class="col-4">
					<div class="form-group form-check">
						<label class="form-check-label">
							<input class="form-check-input" asp-for="ChildrenPlayArea" /> @Html.DisplayNameFor(model => model.ChildrenPlayArea)
						</label>
					</div>
				</div>
				<div class="col-4">
					<div class="form-group form-check">
						<label class="form-check-label">
							<input class="form-check-input" asp-for="SmokiingArea" /> @Html.DisplayNameFor(model => model.SmokiingArea)
						</label>
					</div>
				</div>
			</div>

			<div class="row">
				<div class="col-4">
					<div class="form-group form-check">
						<label class="form-check-label">
							<input class="form-check-input" asp-for="DirectBill" /> @Html.DisplayNameFor(model => model.DirectBill)
						</label>
					</div>
				</div>
				<div class="col-4">
					<div class="form-group form-check">
						<label class="form-check-label">
							<input class="form-check-input" asp-for="Delivery" /> @Html.DisplayNameFor(model => model.Delivery)
						</label>
					</div>
				</div>
				<div class="col-4">
					<div class="form-group form-check">
						<label class="form-check-label">
							<input class="form-check-input" asp-for="Karaoke" /> @Html.DisplayNameFor(model => model.Karaoke)
						</label>
					</div>
				</div>
			</div>

			<div class="row">
				<div class="col-4">
					<div class="form-group form-check">
						<label class="form-check-label">
							<input class="form-check-input" asp-for="Projector" /> @Html.DisplayNameFor(model => model.Projector)
						</label>
					</div>
				</div>
				<div class="col-4">
					<div class="form-group form-check">
						<label class="form-check-label">
							<input class="form-check-input" asp-for="EnventDecoration" /> @Html.DisplayNameFor(model => model.EnventDecoration)
						</label>
					</div>
				</div>

			</div>

			<div class="form-group">
				<label asp-for="CityID" class="control-label"></label>
				<select asp-for="CityID" class="form-control" asp-items="ViewBag.CityID"></select>
			</div>
			<div class="form-group">
				<label asp-for="CategoryID" class="control-label"></label>
				<select asp-for="CategoryID" class="form-control" asp-items="ViewBag.CategoryID"></select>
			</div>

			<div class="form-group">
				<label for="restaurantImages">Restaurant Images:</label>
				<input type="file" id="restaurantImages" name="restaurantImages" class="form-control" multiple onchange="previewImages('restaurantImages', 'restaurantImageList', restaurantFileList)" />
			</div>
			<output id="restaurantImageList"></output>

			<div class="form-group">
				<label for="menuImages">Menu Images:</label>
				<input type="file" id="menuImages" name="menuImages" class="form-control" multiple onchange="previewImages('menuImages', 'menuImageList', menuFileList)" />
			</div>
			<output id="menuImageList"></output>

			<div class="form-group">
				<label for="tags">Tags</label>
				<div class="row">
					@for (int i = 0; i < 4; i++)
					{
						<div class="col-3">
							@for (int j = 0; j < baseTagsPerColumn + (i < remainder ? 1 : 0); j++)
							{
								int tagIndex = i * baseTagsPerColumn + j + Math.Min(i, remainder);
								if (tagIndex < totalTags)
								{
									var tag = tags[tagIndex];
									<div class="form-check">
										<input type="checkbox" class="form-check-input" id="@tag.Id" name="selectedTags" value="@tag.Id" />
										<label class="form-check-label" for="@tag.Id">@tag.Name</label>
									</div>
								}
							}
						</div>
					}
				</div>
				<small id="tagError" class="form-text text-danger" style="display:none;">You must select between 1 and 10 tags.</small>
			</div>

			<div class="form-group">
				<input type="submit" value="Create" class="btn btn-primary" />
			</div>
		</form>
	</div>
</div>

<div>
	<a asp-action="Index">Back to List</a>
</div>

<script>
	let restaurantFileList = [];
	let menuFileList = [];

	function previewImages(inputId, outputId, fileList) {
		const input = document.getElementById(inputId);
		const output = document.getElementById(outputId);

		// Lưu trữ các tệp đã chọn
		const files = input.files;

		// Cập nhật danh sách tệp
		fileList.push(...Array.from(files));

		// Cập nhật thuộc tính files của input
		const newFileList = new DataTransfer();
		fileList.forEach(f => newFileList.items.add(f));
		input.files = newFileList.files;

		// Xóa hình ảnh hiện tại từ giao diện
		output.innerHTML = '';

		// Duyệt qua từng tệp và hiển thị ảnh tương ứng
		for (const file of fileList) {
			const reader = new FileReader();

			reader.onload = function (e) {
				const imgElement = document.createElement('img');
				imgElement.src = e.target.result;
				imgElement.style.width = '150px';
				imgElement.style.margin = '10px';
				imgElement.style.position = 'relative';
				imgElement.classList.add('img-preview');

				const deleteBtn = document.createElement('button');
				deleteBtn.innerText = 'X';
				deleteBtn.style.position = 'absolute';
				deleteBtn.style.top = '0';
				deleteBtn.style.right = '0';
				deleteBtn.style.borderRadius = '50%';
				deleteBtn.style.backgroundColor = 'rgba(255, 255, 255, 0.7)';
				deleteBtn.style.color = 'red';
				deleteBtn.style.border = 'none';
				deleteBtn.style.padding = '2px 5px';
				deleteBtn.onclick = function () { removeImage(file, imgElement, deleteBtn, inputId, fileList); }

				const container = document.createElement('div');
				container.style.display = 'inline-block';
				container.style.position = 'relative';
				container.classList.add('img-container');
				container.appendChild(imgElement);
				container.appendChild(deleteBtn);

				output.appendChild(container);
			}

			reader.readAsDataURL(file);
		}
	}

	function removeImage(file, imgElement, deleteBtn, inputId, fileList) {
		// Xóa từ giao diện người dùng
		const container = imgElement.parentElement;
		container.removeChild(imgElement);
		container.removeChild(deleteBtn);

		// Xóa khỏi danh sách các tệp đã chọn
		const index = fileList.indexOf(file);
		if (index > -1) {
			fileList.splice(index, 1);
		}

		// Cập nhật thuộc tính files của input
		const input = document.getElementById(inputId);
		const newFileList = new DataTransfer();
		fileList.forEach(f => newFileList.items.add(f));
		input.files = newFileList.files;
	}

	function handleSubmit() {
		const formData = new FormData();

		// Duyệt qua tất cả các tệp trong fileList và thêm chúng vào formData
		restaurantFileList.forEach((file, index) => {
			formData.append(`restaurantImages[${index}]`, file);
		});

		menuFileList.forEach((file, index) => {
			formData.append(`menuImages[${index}]`, file);
		});

		// Gửi formData đến server
		fetch('/Restaurants/Create', {
			method: 'POST',
			body: formData
		});
	}

	document.getElementById('restaurantForm').addEventListener('submit', function (e) {
		var selectedTags = document.querySelectorAll('input[name="selectedTags"]:checked').length;

		if (selectedTags < 1 || selectedTags > 10) {
			e.preventDefault();
			document.getElementById('tagError').style.display = 'block';
		}
	});

</script>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}
	<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
	<script src="https://cdn.rawgit.com/devbridge/jQuery-Autocomplete/master/dist/jquery.autocomplete.min.js"></script>

	<script>
		$(document).ready(function () {
			CKEDITOR.replace('txtDesciption', {
				customConfig: '~/ckeditor/config.js',
				extraAllowedContent: 'span',
			});
		});
	</script>
}